{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Documents\\\\wordladder-fe\\\\wordladder_frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\n// import { Component , createRef } from 'react';\n\n// const heuristic = {\n//   technique: \"A* Search\",\n//   startword: \"NEED\",\n//   endword: \"WHEN\",\n//   optimal: 12,\n//   path: [\"reseal\", \"reseat\", \"resent\", \"resend\", \"reseed\", \"rested\", \"tested\", \"tasted\", \"tauted\", \"dauted\", \"daubed\", \"dabbed\", \"dubbed\"],\n//   space: \"0.45 KB\",\n//   time: \"0.1160 sec\"\n// }\n\n// class Header extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       text: '', // Store textarea content\n//       startword: heuristic.startword,\n//       endword: heuristic.endword,\n//       wordlength : heuristic.startword.length\n//     };\n//     this.textAreaRef = createRef(); // สร้าง ref\n\n//   }\n\n//   componentDidMount() {\n//     document.addEventListener('keydown', this.handleKeyPress);\n//   }\n\n//   componentWillUnmount() {\n//     document.removeEventListener('keydown', this.handleKeyPress);\n//   }\n\n//   handleKeyPress = (event) => {\n//     const { key } = event;\n\n//     if (key === 'Backspace') {\n//       this.handleDelete(); // Delete character when pressing Backspace\n//     }\n//     else if (key === 'Enter') {\n//       this.setState((prevState) => ({\n//         text: prevState.text + '\\n', // Add a new line\n//       }));\n//     }\n//     else if (/[a-zA-Z]/.test(key)) {\n//       // Allow only letters (A-Z, a-z)\n//       this.setState((prevState) => ({\n//         text: prevState.text + key.toUpperCase(), // Convert to uppercase\n//       }));\n//     }\n//   };\n\n//   handleButtonClick = (char) => {\n//     this.setState((prevState) => ({\n//       text: prevState.text + char,\n//     }));\n//   };\n\n//   handleDelete = () => {\n//     this.setState((prevState) => ({\n//       text: prevState.text.slice(0, -1), // Remove the last character\n//     }));\n//   };\n\n//   render() {\n//     let textareas = []; // Create an empty array\n\n//     // Use for loop to push textarea elements\n//     for (let i = 0; i < this.state.wordlength; i++) {\n//       if (i === 0){\n//         textareas.push(<textarea className=\"block currentBlock\"readOnly></textarea>);\n//       }\n//       else{\n//         textareas.push(<textarea className=\"block\"readOnly></textarea>);\n//       }\n//     }\n\n//     return (\n//       <div className=\"container\">\n//         <div class=\"gameplay\">\n//           <div className=\"textarea startword\">      \n//             {this.state.startword.split('').map((char) => (\n//               <textarea\n//                 value={char}\n//                 className=\"\"\n//                 readOnly\n//               >\n//                 {char}\n//               </textarea>\n//             ))}      \n//           </div>\n//           <div className=\"textarea input\"> {textareas}\n//             {/* version 1 */}\n//             {/* {this.state.text.split('').map((char) => (\n//                 <textarea\n//                   value={char}\n//                   className=\"\"\n//                   readOnly\n//                 >\n//                   {char}\n//                 </textarea>\n//               ))}   */}\n//               {/* version 2 */}             \n//               {/* <textarea ref={this.textAreaRef} className={this.state.text ? \"textarea input filled\" : \"textarea input current\"} value={this.state.text} readOnly></textarea>\n//               <textarea class=\"\" value={this.state.text} readOnly></textarea>\n//               <textarea class=\"\" value={this.state.text} readOnly></textarea> */}\n//           </div>\n//           <div className=\"textarea input\"> {textareas}</div>\n//           <div className=\"textarea endword\">\n//             {this.state.endword.split('').map((char) => (\n//                 <textarea\n//                   value={char}\n//                   className=\"\"\n//                   readOnly\n//                 >\n//                   {char}\n//                 </textarea>\n//               ))}            \n//           </div>\n//         </div>\n//         <div className=\"keyboard\">\n//           <div className=\"keyboardRow\">\n//             {'QWERTYUIOP'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//           </div>\n//           <div className=\"keyboardRow\">\n//             <div className=\"keyboardSpacer\"></div>\n//             {'ASDFGHJKL'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//             <div className=\"keyboardSpacer\"></div>\n//           </div>\n//           <div className=\"keyboardRow\">\n//             <button className=\"button enterButton\" onClick={() => this.handleButtonClick('\\n')}>\n//               Enter\n//             </button>\n//             {'ZXCVBNM'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//             <button className=\"button deleteButton\" onClick={this.handleDelete}>\n//               <img\n//                 src=\"https://static-00.iconduck.com/assets.00/backspace-icon-2048x1509-3pqr8k29.png\"\n//                 alt=\"-\"\n//               />\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// function App() {\n//   return (\n//     <div>\n//       <Header/>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// -----------------------------------------------------------------------------------------------------------------------\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextAreaList() {\n  _s();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [textareas, setTextareas] = useState([\"\", \"\", \"\", \"\", \"\"]); // มี 5 Textareas\n\n  const handleNext = () => {\n    if (currentIndex < textareas.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n    }\n  };\n  const handleChange = (index, newValue) => {\n    const updatedTextareas = [...textareas]; // Copy array\n    updatedTextareas[index] = newValue; // อัปเดตค่าเฉพาะอันที่ต้องการ\n    setTextareas(updatedTextareas);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [textareas.map((text, i) => /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: i === currentIndex ? \"Current\" : i < currentIndex ? \"Filled\" : \"\",\n      value: text // ผูกค่ากับ state\n      ,\n      onChange: e => handleChange(i, e.target.value) // อัปเดตค่าเฉพาะอันที่แก้ไข\n      ,\n      readOnly: i !== currentIndex // อนุญาตให้พิมพ์ได้เฉพาะอันที่เป็น \"Current\"\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleNext,\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n}\n_s(TextAreaList, \"cpFKHBivzEYM4Ly+T9bg+8kb2/g=\");\n_c = TextAreaList;\nexport default TextAreaList;\nvar _c;\n$RefreshReg$(_c, \"TextAreaList\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","TextAreaList","_s","currentIndex","setCurrentIndex","textareas","setTextareas","handleNext","length","handleChange","index","newValue","updatedTextareas","children","map","text","i","className","value","onChange","e","target","readOnly","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/Documents/wordladder-fe/wordladder_frontend/src/App.js"],"sourcesContent":["// import './App.css';\n// import { Component , createRef } from 'react';\n\n// const heuristic = {\n//   technique: \"A* Search\",\n//   startword: \"NEED\",\n//   endword: \"WHEN\",\n//   optimal: 12,\n//   path: [\"reseal\", \"reseat\", \"resent\", \"resend\", \"reseed\", \"rested\", \"tested\", \"tasted\", \"tauted\", \"dauted\", \"daubed\", \"dabbed\", \"dubbed\"],\n//   space: \"0.45 KB\",\n//   time: \"0.1160 sec\"\n// }\n\n\n// class Header extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       text: '', // Store textarea content\n//       startword: heuristic.startword,\n//       endword: heuristic.endword,\n//       wordlength : heuristic.startword.length\n//     };\n//     this.textAreaRef = createRef(); // สร้าง ref\n\n//   }\n\n//   componentDidMount() {\n//     document.addEventListener('keydown', this.handleKeyPress);\n//   }\n\n//   componentWillUnmount() {\n//     document.removeEventListener('keydown', this.handleKeyPress);\n//   }\n\n//   handleKeyPress = (event) => {\n//     const { key } = event;\n    \n//     if (key === 'Backspace') {\n//       this.handleDelete(); // Delete character when pressing Backspace\n//     }\n//     else if (key === 'Enter') {\n//       this.setState((prevState) => ({\n//         text: prevState.text + '\\n', // Add a new line\n//       }));\n//     }\n//     else if (/[a-zA-Z]/.test(key)) {\n//       // Allow only letters (A-Z, a-z)\n//       this.setState((prevState) => ({\n//         text: prevState.text + key.toUpperCase(), // Convert to uppercase\n//       }));\n//     }\n//   };\n\n//   handleButtonClick = (char) => {\n//     this.setState((prevState) => ({\n//       text: prevState.text + char,\n//     }));\n//   };\n\n//   handleDelete = () => {\n//     this.setState((prevState) => ({\n//       text: prevState.text.slice(0, -1), // Remove the last character\n//     }));\n//   };\n\n//   render() {\n//     let textareas = []; // Create an empty array\n\n//     // Use for loop to push textarea elements\n//     for (let i = 0; i < this.state.wordlength; i++) {\n//       if (i === 0){\n//         textareas.push(<textarea className=\"block currentBlock\"readOnly></textarea>);\n//       }\n//       else{\n//         textareas.push(<textarea className=\"block\"readOnly></textarea>);\n//       }\n//     }\n\n\n//     return (\n//       <div className=\"container\">\n//         <div class=\"gameplay\">\n//           <div className=\"textarea startword\">      \n//             {this.state.startword.split('').map((char) => (\n//               <textarea\n//                 value={char}\n//                 className=\"\"\n//                 readOnly\n//               >\n//                 {char}\n//               </textarea>\n//             ))}      \n//           </div>\n//           <div className=\"textarea input\"> {textareas}\n//             {/* version 1 */}\n//             {/* {this.state.text.split('').map((char) => (\n//                 <textarea\n//                   value={char}\n//                   className=\"\"\n//                   readOnly\n//                 >\n//                   {char}\n//                 </textarea>\n//               ))}   */}\n//               {/* version 2 */}             \n//               {/* <textarea ref={this.textAreaRef} className={this.state.text ? \"textarea input filled\" : \"textarea input current\"} value={this.state.text} readOnly></textarea>\n//               <textarea class=\"\" value={this.state.text} readOnly></textarea>\n//               <textarea class=\"\" value={this.state.text} readOnly></textarea> */}\n//           </div>\n//           <div className=\"textarea input\"> {textareas}</div>\n//           <div className=\"textarea endword\">\n//             {this.state.endword.split('').map((char) => (\n//                 <textarea\n//                   value={char}\n//                   className=\"\"\n//                   readOnly\n//                 >\n//                   {char}\n//                 </textarea>\n//               ))}            \n//           </div>\n//         </div>\n//         <div className=\"keyboard\">\n//           <div className=\"keyboardRow\">\n//             {'QWERTYUIOP'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//           </div>\n//           <div className=\"keyboardRow\">\n//             <div className=\"keyboardSpacer\"></div>\n//             {'ASDFGHJKL'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//             <div className=\"keyboardSpacer\"></div>\n//           </div>\n//           <div className=\"keyboardRow\">\n//             <button className=\"button enterButton\" onClick={() => this.handleButtonClick('\\n')}>\n//               Enter\n//             </button>\n//             {'ZXCVBNM'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//             <button className=\"button deleteButton\" onClick={this.handleDelete}>\n//               <img\n//                 src=\"https://static-00.iconduck.com/assets.00/backspace-icon-2048x1509-3pqr8k29.png\"\n//                 alt=\"-\"\n//               />\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// function App() {\n//   return (\n//     <div>\n//       <Header/>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n// -----------------------------------------------------------------------------------------------------------------------\n\nimport { useState } from \"react\";\n\nfunction TextAreaList() {\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [textareas, setTextareas] = useState([\"\", \"\", \"\", \"\", \"\"]); // มี 5 Textareas\n\n  const handleNext = () => {\n    if (currentIndex < textareas.length - 1) {\n      setCurrentIndex(currentIndex + 1);\n    }\n  };\n\n  const handleChange = (index, newValue) => {\n    const updatedTextareas = [...textareas]; // Copy array\n    updatedTextareas[index] = newValue; // อัปเดตค่าเฉพาะอันที่ต้องการ\n    setTextareas(updatedTextareas);\n  };\n\n  return (\n    <div>\n      {textareas.map((text, i) => (\n        <textarea\n          key={i}\n          className={i === currentIndex ? \"Current\" : i < currentIndex ? \"Filled\" : \"\"}\n          value={text} // ผูกค่ากับ state\n          onChange={(e) => handleChange(i, e.target.value)} // อัปเดตค่าเฉพาะอันที่แก้ไข\n          readOnly={i !== currentIndex} // อนุญาตให้พิมพ์ได้เฉพาะอันที่เป็น \"Current\"\n        />\n      ))}\n      <button onClick={handleNext}>Next</button>\n    </div>\n  );\n}\n\nexport default TextAreaList;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;;EAElE,MAAMS,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIJ,YAAY,GAAGE,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACvCJ,eAAe,CAACD,YAAY,GAAG,CAAC,CAAC;IACnC;EACF,CAAC;EAED,MAAMM,YAAY,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;IACxC,MAAMC,gBAAgB,GAAG,CAAC,GAAGP,SAAS,CAAC,CAAC,CAAC;IACzCO,gBAAgB,CAACF,KAAK,CAAC,GAAGC,QAAQ,CAAC,CAAC;IACpCL,YAAY,CAACM,gBAAgB,CAAC;EAChC,CAAC;EAED,oBACEZ,OAAA;IAAAa,QAAA,GACGR,SAAS,CAACS,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,kBACrBhB,OAAA;MAEEiB,SAAS,EAAED,CAAC,KAAKb,YAAY,GAAG,SAAS,GAAGa,CAAC,GAAGb,YAAY,GAAG,QAAQ,GAAG,EAAG;MAC7Ee,KAAK,EAAEH,IAAK,CAAC;MAAA;MACbI,QAAQ,EAAGC,CAAC,IAAKX,YAAY,CAACO,CAAC,EAAEI,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE,CAAC;MAAA;MAClDI,QAAQ,EAAEN,CAAC,KAAKb,YAAa,CAAC;IAAA,GAJzBa,CAAC;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKP,CACF,CAAC,eACF1B,OAAA;MAAQ2B,OAAO,EAAEpB,UAAW;MAAAM,QAAA,EAAC;IAAI;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvC,CAAC;AAEV;AAACxB,EAAA,CA9BQD,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAgCrB,eAAeA,YAAY;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}