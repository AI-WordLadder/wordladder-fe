{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Documents\\\\wordladder-fe\\\\wordladder_frontend\\\\src\\\\App.js\";\n// import './App.css';\n// import { Component, useState } from 'react';\n\n// const heuristic = {\n//   technique: \"A* Search\",\n//   startword: \"sea\",\n//   endword: \"bee\",\n//   optimal: 12,\n//   path: [\"reseal\", \"reseat\", \"resent\", \"resend\", \"reseed\", \"rested\", \"tested\", \"tasted\", \"tauted\", \"dauted\", \"daubed\", \"dabbed\", \"dubbed\"],\n//   space: \"0.45 KB\",\n//   time: \"0.1160 sec\"\n// }\n\n// class Header extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       text: '', // Store textarea content\n//       startword: heuristic.startword,\n//       endword: heuristic.endword\n//     };\n//   }\n\n//   componentDidMount() {\n//     document.addEventListener('keydown', this.handleKeyPress);\n//   }\n\n//   componentWillUnmount() {\n//     document.removeEventListener('keydown', this.handleKeyPress);\n//   }\n\n//   handleKeyPress = (event) => {\n//     const { key } = event;\n\n//     if (key === 'Backspace') {\n//       this.handleDelete(); // Delete character when pressing Backspace\n//     }\n//     else if (/[a-zA-Z]/.test(key)) {\n//       // Allow only letters (A-Z, a-z)\n//       this.setState((prevState) => ({\n//         text: prevState.text + key.toUpperCase(), // Convert to uppercase\n//       }));\n//     } else if (key === 'Enter') {\n//       this.setState((prevState) => ({\n//         text: prevState.text + '\\n', // Add a new line\n//       }));\n//     }\n//   };\n\n//   handleButtonClick = (char) => {\n//     this.setState((prevState) => ({\n//       text: prevState.text + char,\n//     }));\n//   };\n\n//   handleDelete = () => {\n//     this.setState((prevState) => ({\n//       text: prevState.text.slice(0, -1), // Remove the last character\n//     }));\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"container\">\n//         <div class=\"gameplay\">\n//           <div className=\"textarea startword\">      \n//             {this.state.startword.split('').map((char) => (\n//               <textarea\n//                 value={char}\n//                 className=\"\"\n//                 readOnly\n//               >\n//                 {char}\n//               </textarea>\n//             ))}      \n//           </div>\n//           <div className=\"textarea input\">            \n//             <textarea class=\"\" value={this.state.text} readOnly></textarea>\n//             <textarea class=\"\" value={this.state.text} readOnly></textarea>\n//             <textarea class=\"\" value={this.state.text} readOnly></textarea>\n//           </div>\n//           <div className=\"textarea endword\">\n//             {this.state.endword.split('').map((char) => (\n//                 <textarea\n//                   value={char}\n//                   className=\"\"\n//                   readOnly\n//                 >\n//                   {char}\n//                 </textarea>\n//               ))}            \n//           </div>\n//         </div>\n//         <div className=\"keyboard\">\n//           <div className=\"keyboardRow\">\n//             {'QWERTYUIOP'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//           </div>\n//           <div className=\"keyboardRow\">\n//             <div className=\"keyboardSpacer\"></div>\n//             {'ASDFGHJKL'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//             <div className=\"keyboardSpacer\"></div>\n//           </div>\n//           <div className=\"keyboardRow\">\n//             <button className=\"button enterButton\" onClick={() => this.handleButtonClick('\\n')}>\n//               Enter\n//             </button>\n//             {'ZXCVBNM'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//             <button className=\"button deleteButton\" onClick={this.handleDelete}>\n//               <img\n//                 src=\"https://static-00.iconduck.com/assets.00/backspace-icon-2048x1509-3pqr8k29.png\"\n//                 alt=\"-\"\n//               />\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// function App() {\n//   return (\n//     <div>\n//       <Header/>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { Component, createRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass TextAreaComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.checkClassName = () => {\n      if (this.textAreaRef.current) {\n        console.log(this.textAreaRef.current.classList.contains(\"filled\")); // true หรือ false\n      }\n    };\n    this.state = {\n      text: \"\"\n    };\n    this.textAreaRef = /*#__PURE__*/createRef(); // สร้าง ref\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: this.textAreaRef,\n        className: this.state.text ? \"filled\" : \"\"\n        // value={ this.state.text}\n        ,\n        value: this.textAreaRef.current.classList.contains(\"current\") === true ? this.state.text : this.state.text.word,\n        onChange: e => this.setState({\n          text: e.target.value\n        }),\n        placeholder: \"Type something...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default TextAreaComponent;","map":{"version":3,"names":["React","Component","createRef","jsxDEV","_jsxDEV","TextAreaComponent","constructor","props","checkClassName","textAreaRef","current","console","log","classList","contains","state","text","render","children","ref","className","value","word","onChange","e","setState","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/ADMIN/Documents/wordladder-fe/wordladder_frontend/src/App.js"],"sourcesContent":["// import './App.css';\n// import { Component, useState } from 'react';\n\n// const heuristic = {\n//   technique: \"A* Search\",\n//   startword: \"sea\",\n//   endword: \"bee\",\n//   optimal: 12,\n//   path: [\"reseal\", \"reseat\", \"resent\", \"resend\", \"reseed\", \"rested\", \"tested\", \"tasted\", \"tauted\", \"dauted\", \"daubed\", \"dabbed\", \"dubbed\"],\n//   space: \"0.45 KB\",\n//   time: \"0.1160 sec\"\n// }\n\n// class Header extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       text: '', // Store textarea content\n//       startword: heuristic.startword,\n//       endword: heuristic.endword\n//     };\n//   }\n\n//   componentDidMount() {\n//     document.addEventListener('keydown', this.handleKeyPress);\n//   }\n\n//   componentWillUnmount() {\n//     document.removeEventListener('keydown', this.handleKeyPress);\n//   }\n\n//   handleKeyPress = (event) => {\n//     const { key } = event;\n    \n//     if (key === 'Backspace') {\n//       this.handleDelete(); // Delete character when pressing Backspace\n//     }\n//     else if (/[a-zA-Z]/.test(key)) {\n//       // Allow only letters (A-Z, a-z)\n//       this.setState((prevState) => ({\n//         text: prevState.text + key.toUpperCase(), // Convert to uppercase\n//       }));\n//     } else if (key === 'Enter') {\n//       this.setState((prevState) => ({\n//         text: prevState.text + '\\n', // Add a new line\n//       }));\n//     }\n//   };\n\n//   handleButtonClick = (char) => {\n//     this.setState((prevState) => ({\n//       text: prevState.text + char,\n//     }));\n//   };\n\n//   handleDelete = () => {\n//     this.setState((prevState) => ({\n//       text: prevState.text.slice(0, -1), // Remove the last character\n//     }));\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"container\">\n//         <div class=\"gameplay\">\n//           <div className=\"textarea startword\">      \n//             {this.state.startword.split('').map((char) => (\n//               <textarea\n//                 value={char}\n//                 className=\"\"\n//                 readOnly\n//               >\n//                 {char}\n//               </textarea>\n//             ))}      \n//           </div>\n//           <div className=\"textarea input\">            \n//             <textarea class=\"\" value={this.state.text} readOnly></textarea>\n//             <textarea class=\"\" value={this.state.text} readOnly></textarea>\n//             <textarea class=\"\" value={this.state.text} readOnly></textarea>\n//           </div>\n//           <div className=\"textarea endword\">\n//             {this.state.endword.split('').map((char) => (\n//                 <textarea\n//                   value={char}\n//                   className=\"\"\n//                   readOnly\n//                 >\n//                   {char}\n//                 </textarea>\n//               ))}            \n//           </div>\n//         </div>\n//         <div className=\"keyboard\">\n//           <div className=\"keyboardRow\">\n//             {'QWERTYUIOP'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//           </div>\n//           <div className=\"keyboardRow\">\n//             <div className=\"keyboardSpacer\"></div>\n//             {'ASDFGHJKL'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//             <div className=\"keyboardSpacer\"></div>\n//           </div>\n//           <div className=\"keyboardRow\">\n//             <button className=\"button enterButton\" onClick={() => this.handleButtonClick('\\n')}>\n//               Enter\n//             </button>\n//             {'ZXCVBNM'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//             <button className=\"button deleteButton\" onClick={this.handleDelete}>\n//               <img\n//                 src=\"https://static-00.iconduck.com/assets.00/backspace-icon-2048x1509-3pqr8k29.png\"\n//                 alt=\"-\"\n//               />\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// function App() {\n//   return (\n//     <div>\n//       <Header/>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React, { Component, createRef } from \"react\";\n\nclass TextAreaComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { text: \"\" };\n    this.textAreaRef = createRef(); // สร้าง ref\n  }\n\n  checkClassName = () => {\n    if (this.textAreaRef.current) {\n      console.log(this.textAreaRef.current.classList.contains(\"filled\")); // true หรือ false\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <textarea\n          ref={this.textAreaRef}\n          className={this.state.text ? \"filled\" : \"\"}\n          // value={ this.state.text}\n          value={this.textAreaRef.current.classList.contains(\"current\") === true ? this.state.text : this.state.text.word}\n          onChange={(e) => this.setState({ text: e.target.value })}\n          placeholder=\"Type something...\"\n        ></textarea>\n        {/* <button onClick={this.checkClassName}>Check Class</button> */}\n      </div>\n    );\n  }\n}\n\nexport default TextAreaComponent;\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,iBAAiB,SAASJ,SAAS,CAAC;EACxCK,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAKfC,cAAc,GAAG,MAAM;MACrB,IAAI,IAAI,CAACC,WAAW,CAACC,OAAO,EAAE;QAC5BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,WAAW,CAACC,OAAO,CAACG,SAAS,CAACC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;MACtE;IACF,CAAC;IARC,IAAI,CAACC,KAAK,GAAG;MAAEC,IAAI,EAAE;IAAG,CAAC;IACzB,IAAI,CAACP,WAAW,gBAAGP,SAAS,CAAC,CAAC,CAAC,CAAC;EAClC;EAQAe,MAAMA,CAAA,EAAG;IACP,oBACEb,OAAA;MAAAc,QAAA,eACEd,OAAA;QACEe,GAAG,EAAE,IAAI,CAACV,WAAY;QACtBW,SAAS,EAAE,IAAI,CAACL,KAAK,CAACC,IAAI,GAAG,QAAQ,GAAG;QACxC;QAAA;QACAK,KAAK,EAAE,IAAI,CAACZ,WAAW,CAACC,OAAO,CAACG,SAAS,CAACC,QAAQ,CAAC,SAAS,CAAC,KAAK,IAAI,GAAG,IAAI,CAACC,KAAK,CAACC,IAAI,GAAG,IAAI,CAACD,KAAK,CAACC,IAAI,CAACM,IAAK;QAChHC,QAAQ,EAAGC,CAAC,IAAK,IAAI,CAACC,QAAQ,CAAC;UAAET,IAAI,EAAEQ,CAAC,CAACE,MAAM,CAACL;QAAM,CAAC,CAAE;QACzDM,WAAW,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAET,CAAC;EAEV;AACF;AAEA,eAAe1B,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}