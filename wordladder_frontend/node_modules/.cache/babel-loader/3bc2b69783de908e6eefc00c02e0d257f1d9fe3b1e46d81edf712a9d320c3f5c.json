{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Documents\\\\wordladder-fe\\\\wordladder_frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\n// import { Component, useState , createRef } from 'react';\n\n// const heuristic = {\n//   technique: \"A* Search\",\n//   startword: \"sea\",\n//   endword: \"bee\",\n//   optimal: 12,\n//   path: [\"reseal\", \"reseat\", \"resent\", \"resend\", \"reseed\", \"rested\", \"tested\", \"tasted\", \"tauted\", \"dauted\", \"daubed\", \"dabbed\", \"dubbed\"],\n//   space: \"0.45 KB\",\n//   time: \"0.1160 sec\"\n// }\n\n// class Header extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       text: '', // Store textarea content\n//       startword: heuristic.startword,\n//       endword: heuristic.endword,\n//     };\n//     this.textAreaRef = createRef(); // สร้าง ref\n\n//   }\n\n//   componentDidMount() {\n//     document.addEventListener('keydown', this.handleKeyPress);\n//   }\n\n//   componentWillUnmount() {\n//     document.removeEventListener('keydown', this.handleKeyPress);\n//   }\n\n//   handleKeyPress = (event) => {\n//     const { key } = event;\n\n//     if (key === 'Backspace') {\n//       this.handleDelete(); // Delete character when pressing Backspace\n//     }\n//     else if (/[a-zA-Z]/.test(key)) {\n//       // Allow only letters (A-Z, a-z)\n//       this.setState((prevState) => ({\n//         text: prevState.text + key.toUpperCase(), // Convert to uppercase\n//       }));\n//     } else if (key === 'Enter') {\n//       this.setState((prevState) => ({\n//         text: prevState.text + '\\n', // Add a new line\n//       }));\n//     }\n//   };\n\n//   handleButtonClick = (char) => {\n//     this.setState((prevState) => ({\n//       text: prevState.text + char,\n//     }));\n//   };\n\n//   handleDelete = () => {\n//     this.setState((prevState) => ({\n//       text: prevState.text.slice(0, -1), // Remove the last character\n//     }));\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"container\">\n//         <div class=\"gameplay\">\n//           <div className=\"textarea startword\">      \n//             {this.state.startword.split('').map((char) => (\n//               <textarea\n//                 value={char}\n//                 className=\"\"\n//                 readOnly\n//               >\n//                 {char}\n//               </textarea>\n//             ))}      \n//           </div>\n//           <div className=\"textarea input\">           \n//             <textarea ref={this.textAreaRef} className={this.state.text ? \"textarea input filled\" : \"textarea input current\"} value={this.state.text} readOnly></textarea>\n//             <textarea class=\"\" value={this.state.text} readOnly></textarea>\n//             <textarea class=\"\" value={this.state.text} readOnly></textarea>\n//           </div>\n//           <div className=\"textarea endword\">\n//             {this.state.endword.split('').map((char) => (\n//                 <textarea\n//                   value={char}\n//                   className=\"\"\n//                   readOnly\n//                 >\n//                   {char}\n//                 </textarea>\n//               ))}            \n//           </div>\n//         </div>\n//         <div className=\"keyboard\">\n//           <div className=\"keyboardRow\">\n//             {'QWERTYUIOP'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//           </div>\n//           <div className=\"keyboardRow\">\n//             <div className=\"keyboardSpacer\"></div>\n//             {'ASDFGHJKL'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//             <div className=\"keyboardSpacer\"></div>\n//           </div>\n//           <div className=\"keyboardRow\">\n//             <button className=\"button enterButton\" onClick={() => this.handleButtonClick('\\n')}>\n//               Enter\n//             </button>\n//             {'ZXCVBNM'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//             <button className=\"button deleteButton\" onClick={this.handleDelete}>\n//               <img\n//                 src=\"https://static-00.iconduck.com/assets.00/backspace-icon-2048x1509-3pqr8k29.png\"\n//                 alt=\"-\"\n//               />\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// function App() {\n//   return (\n//     <div>\n//       <Header/>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n// -----------------------------------------------------------------------------------------------------------------------\n\n// import React, { Component, createRef } from \"react\";\n\n// class TextAreaComponent extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { text: \"\", word : \"e\" };\n//     this.textAreaRef = createRef(); // สร้าง ref\n//   }\n\n//   checkClassName = () => {\n//     if (this.textAreaRef.current) {\n//       console.log(this.textAreaRef.current.classList.contains(\"filled\")); // true หรือ false\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <textarea\n//           ref={this.textAreaRef}\n//           className={this.state.text ? \"filled\" : \"current\"}\n//           // value={ this.state.text}\n//           value={ this.state.text}\n//           onChange={(e) => this.setState({ text: e.target.value })}\n//           placeholder=\"Type something...\"\n//         ></textarea>\n//         {/* <button onClick={this.checkClassName}>Check Class</button> */}\n//       </div>\n//     );\n//   }\n// }\n\n// export default TextAreaComponent;\n\nimport { useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextAreaComponent() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const textAreaRef = useRef(null);\n  const updateText = e => {\n    var _textAreaRef$current;\n    if ((_textAreaRef$current = textAreaRef.current) !== null && _textAreaRef$current !== void 0 && _textAreaRef$current.classList.contains(\"current\")) {\n      setText(e.target.value);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: textAreaRef,\n      className: \"current\",\n      value: text,\n      onChange: updateText,\n      placeholder: \"Type something...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n_s(TextAreaComponent, \"VlpoxWtxwRQlzdbWmhpgJxTFcOQ=\");\n_c = TextAreaComponent;\nexport default TextAreaComponent;\nvar _c;\n$RefreshReg$(_c, \"TextAreaComponent\");","map":{"version":3,"names":["useState","useRef","jsxDEV","_jsxDEV","TextAreaComponent","_s","text","setText","textAreaRef","updateText","e","_textAreaRef$current","current","classList","contains","target","value","children","ref","className","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ADMIN/Documents/wordladder-fe/wordladder_frontend/src/App.js"],"sourcesContent":["// import './App.css';\n// import { Component, useState , createRef } from 'react';\n\n// const heuristic = {\n//   technique: \"A* Search\",\n//   startword: \"sea\",\n//   endword: \"bee\",\n//   optimal: 12,\n//   path: [\"reseal\", \"reseat\", \"resent\", \"resend\", \"reseed\", \"rested\", \"tested\", \"tasted\", \"tauted\", \"dauted\", \"daubed\", \"dabbed\", \"dubbed\"],\n//   space: \"0.45 KB\",\n//   time: \"0.1160 sec\"\n// }\n\n// class Header extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       text: '', // Store textarea content\n//       startword: heuristic.startword,\n//       endword: heuristic.endword,\n//     };\n//     this.textAreaRef = createRef(); // สร้าง ref\n\n//   }\n\n//   componentDidMount() {\n//     document.addEventListener('keydown', this.handleKeyPress);\n//   }\n\n//   componentWillUnmount() {\n//     document.removeEventListener('keydown', this.handleKeyPress);\n//   }\n\n//   handleKeyPress = (event) => {\n//     const { key } = event;\n    \n//     if (key === 'Backspace') {\n//       this.handleDelete(); // Delete character when pressing Backspace\n//     }\n//     else if (/[a-zA-Z]/.test(key)) {\n//       // Allow only letters (A-Z, a-z)\n//       this.setState((prevState) => ({\n//         text: prevState.text + key.toUpperCase(), // Convert to uppercase\n//       }));\n//     } else if (key === 'Enter') {\n//       this.setState((prevState) => ({\n//         text: prevState.text + '\\n', // Add a new line\n//       }));\n//     }\n//   };\n\n//   handleButtonClick = (char) => {\n//     this.setState((prevState) => ({\n//       text: prevState.text + char,\n//     }));\n//   };\n\n//   handleDelete = () => {\n//     this.setState((prevState) => ({\n//       text: prevState.text.slice(0, -1), // Remove the last character\n//     }));\n//   };\n\n//   render() {\n//     return (\n//       <div className=\"container\">\n//         <div class=\"gameplay\">\n//           <div className=\"textarea startword\">      \n//             {this.state.startword.split('').map((char) => (\n//               <textarea\n//                 value={char}\n//                 className=\"\"\n//                 readOnly\n//               >\n//                 {char}\n//               </textarea>\n//             ))}      \n//           </div>\n//           <div className=\"textarea input\">           \n//             <textarea ref={this.textAreaRef} className={this.state.text ? \"textarea input filled\" : \"textarea input current\"} value={this.state.text} readOnly></textarea>\n//             <textarea class=\"\" value={this.state.text} readOnly></textarea>\n//             <textarea class=\"\" value={this.state.text} readOnly></textarea>\n//           </div>\n//           <div className=\"textarea endword\">\n//             {this.state.endword.split('').map((char) => (\n//                 <textarea\n//                   value={char}\n//                   className=\"\"\n//                   readOnly\n//                 >\n//                   {char}\n//                 </textarea>\n//               ))}            \n//           </div>\n//         </div>\n//         <div className=\"keyboard\">\n//           <div className=\"keyboardRow\">\n//             {'QWERTYUIOP'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//           </div>\n//           <div className=\"keyboardRow\">\n//             <div className=\"keyboardSpacer\"></div>\n//             {'ASDFGHJKL'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//             <div className=\"keyboardSpacer\"></div>\n//           </div>\n//           <div className=\"keyboardRow\">\n//             <button className=\"button enterButton\" onClick={() => this.handleButtonClick('\\n')}>\n//               Enter\n//             </button>\n//             {'ZXCVBNM'.split('').map((char) => (\n//               <button\n//                 key={char}\n//                 className=\"button characterButton\"\n//                 onClick={() => this.handleButtonClick(char)}\n//               >\n//                 {char}\n//               </button>\n//             ))}\n//             <button className=\"button deleteButton\" onClick={this.handleDelete}>\n//               <img\n//                 src=\"https://static-00.iconduck.com/assets.00/backspace-icon-2048x1509-3pqr8k29.png\"\n//                 alt=\"-\"\n//               />\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// function App() {\n//   return (\n//     <div>\n//       <Header/>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n// -----------------------------------------------------------------------------------------------------------------------\n\n\n// import React, { Component, createRef } from \"react\";\n\n// class TextAreaComponent extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { text: \"\", word : \"e\" };\n//     this.textAreaRef = createRef(); // สร้าง ref\n//   }\n\n//   checkClassName = () => {\n//     if (this.textAreaRef.current) {\n//       console.log(this.textAreaRef.current.classList.contains(\"filled\")); // true หรือ false\n//     }\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <textarea\n//           ref={this.textAreaRef}\n//           className={this.state.text ? \"filled\" : \"current\"}\n//           // value={ this.state.text}\n//           value={ this.state.text}\n//           onChange={(e) => this.setState({ text: e.target.value })}\n//           placeholder=\"Type something...\"\n//         ></textarea>\n//         {/* <button onClick={this.checkClassName}>Check Class</button> */}\n//       </div>\n//     );\n//   }\n// }\n\n// export default TextAreaComponent;\n\n\n\n\nimport { useState, useRef } from \"react\";\n\nfunction TextAreaComponent() {\n  const [text, setText] = useState(\"\");\n  const textAreaRef = useRef(null);\n\n  const updateText = (e) => {\n    if (textAreaRef.current?.classList.contains(\"current\")) {\n      setText(e.target.value);\n    }\n  };\n\n  return (\n    <div>\n      <textarea\n        ref={textAreaRef}\n        className=\"current\"\n        value={text}\n        onChange={updateText}\n        placeholder=\"Type something...\"\n      ></textarea>\n    </div>\n  );\n}\n\nexport default TextAreaComponent;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,iBAAiBA,CAAA,EAAG;EAAAC,EAAA;EAC3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMQ,WAAW,GAAGP,MAAM,CAAC,IAAI,CAAC;EAEhC,MAAMQ,UAAU,GAAIC,CAAC,IAAK;IAAA,IAAAC,oBAAA;IACxB,KAAAA,oBAAA,GAAIH,WAAW,CAACI,OAAO,cAAAD,oBAAA,eAAnBA,oBAAA,CAAqBE,SAAS,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE;MACtDP,OAAO,CAACG,CAAC,CAACK,MAAM,CAACC,KAAK,CAAC;IACzB;EACF,CAAC;EAED,oBACEb,OAAA;IAAAc,QAAA,eACEd,OAAA;MACEe,GAAG,EAAEV,WAAY;MACjBW,SAAS,EAAC,SAAS;MACnBH,KAAK,EAAEV,IAAK;MACZc,QAAQ,EAAEX,UAAW;MACrBY,WAAW,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV;AAACpB,EAAA,CArBQD,iBAAiB;AAAAsB,EAAA,GAAjBtB,iBAAiB;AAuB1B,eAAeA,iBAAiB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}